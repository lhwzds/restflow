@use 'sass:color';

@mixin node-base($width: var(--rf-size-md), $min-height: var(--rf-size-base)) {
  width: $width;
  min-height: $min-height;
  position: relative;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  
  &:hover {
    transform: translateY(-2px);
  }
}

@mixin node-glass($primary-color) {
  background: linear-gradient(
    135deg,
    var(--rf-color-surface-primary),
    var(--rf-color-surface-secondary)
  );
  backdrop-filter: blur(16px);
  -webkit-backdrop-filter: blur(16px);
  border: 1px solid rgba($primary-color, 0.2);
  box-shadow: 
    0 4px 16px rgba($primary-color, 0.15),
    inset 0 0 0 1px var(--rf-color-border-overlay);
}

@mixin node-execution-states() {
  &.execution-running {
    // Simple pulse effect for running state
    animation: pulse-subtle 2s ease-in-out infinite;
  }

  &.execution-completed {
    .node-body {
      border-color: var(--rf-color-success-border) !important;
      box-shadow:
        0 4px 16px var(--rf-color-success-shadow),
        inset 0 0 0 1px var(--rf-color-success-border-light) !important;

      &::before {
        background: var(--rf-color-success) !important;
      }
    }
  }

  &.execution-failed {
    .node-body {
      border-color: var(--rf-color-danger) !important;
      background: linear-gradient(
        135deg,
        var(--rf-color-danger-bg-light),
        var(--rf-color-danger-bg-lighter)
      ) !important;
      box-shadow:
        0 4px 16px var(--rf-color-danger-shadow),
        inset 0 0 0 1px var(--rf-color-danger-shadow) !important;

      :global(html.dark) & {
        background: linear-gradient(
          135deg,
          rgba(239, 68, 68, 0.15),
          rgba(239, 68, 68, 0.1)
        ) !important;
      }

      &::before {
        background: var(--rf-color-danger) !important;
      }
    }
  }
}

@keyframes pulse-subtle {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.8;
  }
}

@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    opacity: 0.4;
  }
  50% {
    transform: scale(1.3);
    opacity: 0;
  }
}

@mixin node-handle($color) {
  .custom-handle {
    width: 8px;
    height: 8px;
    background: var(--rf-color-bg-container);
    border: 2px solid $color;
    
    &:hover {
      width: 10px;
      height: 10px;
      border-width: 3px;
    }
  }
}

@mixin node-text() {
  .node-label {
    color: var(--rf-color-text-primary);
    font-weight: var(--rf-font-weight-semibold);
    font-size: var(--rf-font-size-sm);
    line-height: 1.3;
  }
  
  .node-description,
  .node-path {
    color: var(--rf-color-text-secondary);
    font-size: var(--rf-font-size-xs);
    line-height: 1.3;
    margin-top: var(--rf-spacing-2xs);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .node-path {
    font-family: 'Monaco', 'Consolas', monospace;
  }

  .execution-time {
    position: absolute;
    bottom: -18px;
    left: 50%;
    transform: translateX(-50%);
    font-size: var(--rf-font-size-xs);
    color: var(--rf-color-text-secondary);
    background: var(--rf-color-bg-container);
    padding: var(--rf-spacing-3xs) var(--rf-spacing-xs);
    border-radius: var(--rf-radius-small);
    white-space: nowrap;
    box-shadow: var(--rf-shadow-sm);
  }
}

@mixin node-top-bar($color) {
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg,
      $color,
      color.adjust($color, $lightness: 5%)
    );
  }
}

@mixin node-icon($size: var(--rf-size-xs), $gradient: null) {
  width: $size;
  height: $size;
  border-radius: var(--rf-spacing-lg);
  background: if($gradient, $gradient, currentColor);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--rf-color-white);
  position: relative;
  z-index: 2;
}

@mixin trigger-node($node-color, $node-color-light, $width: var(--rf-size-md), $height: var(--rf-size-base)) {
  @include node-base($width, $height);
  @include node-execution-states();
  @include node-handle($node-color);
  @include node-text();
  
  &:hover {
    .pulse-effect {
      animation: pulse 2s ease-in-out infinite;
    }
  }
  
  .node-body {
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: var(--rf-radius-lg);
    overflow: hidden;
    
    @include node-glass($node-color);
    @include node-top-bar($node-color);
  }
  
  .glass-layer {
    padding: var(--rf-spacing-md) var(--rf-spacing-md);
    display: flex;
    align-items: center;
    gap: var(--rf-spacing-md);
  }
  
  .trigger-indicator {
    position: relative;
    flex-shrink: 0;
  }
  
  .trigger-icon {
    @include node-icon(var(--rf-size-xs), $node-color);
  }

  .pulse-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: var(--rf-size-xs);
    height: var(--rf-size-xs);
    border-radius: var(--rf-spacing-md);
    background: linear-gradient(135deg, $node-color, color.adjust($node-color, $lightness: 5%));
    opacity: 0.4;
    z-index: 1;
  }
  
  .node-info {
    flex: 1;
    min-width: 0;
  }
}