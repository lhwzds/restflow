name: Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-docs-

      - name: Create frontend dist directory
        run: mkdir -p web/dist

      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin --locked

      # Setup Node.js for frontend coverage
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd web
          npm ci

      - name: Generate frontend coverage
        run: |
          cd web
          npm run test:coverage

      # Generate Rust API documentation
      - name: Build Rust API docs
        run: cargo doc --no-deps --document-private-items --all-features --package restflow-core --package restflow-server

      # Generate backend coverage report
      - name: Generate backend coverage report
        run: cargo tarpaulin --out html --output-dir target/coverage --all-features --timeout 300 --packages restflow-core restflow-server

      # Install MkDocs
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install MkDocs Material
        run: pip install mkdocs-material

      # Build MkDocs site
      - name: Build MkDocs documentation
        run: |
          cd docs
          mkdocs build

      # Debug: List generated files
      - name: List generated files
        run: |
          echo "=== Checking target/doc ==="
          ls -la target/doc/ || echo "target/doc not found"
          echo "=== Checking target/coverage ==="
          ls -la target/coverage/ || echo "target/coverage not found"
          echo "=== Checking docs/site ==="
          ls -la docs/site/ || echo "docs/site not found"

      # Prepare documentation site
      - name: Prepare docs site
        run: |
          mkdir -p docs-site

          # Copy MkDocs site as root
          cp -r docs/site/* docs-site/

          # Copy Rust API docs (from target/doc/)
          mkdir -p docs-site/api
          if [ -d "target/doc" ] && [ "$(ls -A target/doc)" ]; then
            cp -r target/doc/* docs-site/api/
          else
            echo "Warning: No Rust API docs found"
          fi

          # Copy coverage reports
          mkdir -p docs-site/coverage

          # Copy backend coverage
          if [ -d "target/coverage" ] && [ "$(ls -A target/coverage)" ]; then
            mkdir -p docs-site/coverage/backend
            cp -r target/coverage/* docs-site/coverage/backend/
          else
            echo "Warning: No backend coverage report found"
          fi

          # Copy frontend coverage
          if [ -d "web/coverage" ] && [ "$(ls -A web/coverage)" ]; then
            mkdir -p docs-site/coverage/frontend
            cp -r web/coverage/* docs-site/coverage/frontend/
          else
            echo "Warning: No frontend coverage report found"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
